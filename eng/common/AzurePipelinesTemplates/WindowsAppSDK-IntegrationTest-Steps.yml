# This yml template is for running the testAll script in ProjectReunionInternal
# It downloads the WindowsAppSDK NuGetPackage from WindowsAppSDKNugetPackage (by default)
#
# Requirements:
# - This yml template can only be called from a pipeline in the "microsoft" AzureDevOps 
# - Only the ProjectReunionInternal repository is checkout in the job
#
# The template eng\common\AzurePipelinesTemplates\WindowsAppSDK-BuildSetup-Steps.yml
# will facilitate setting up the requirements to sucessfully run this template.
# eng\common\AzurePipelinesTemplates\WindowsAppSDK-Build-Steps.yml will build the 
# WindowsAppSDK Nuget Package for this template to use.
# 
# In most cases, WindowsAppSDK-BuildSetup-Steps.yml should be called first,
# then WindowsAppSDK-Build-Steps.yml, and finally WindowsAppSDK-IntegrationTest-Steps.yml
#
# Parameters:
#   WinAppSDkPackageArtifactName
#     Name of the Artifact where the WindowsAppSDK NuGetPackage for the build lives

parameters:
  - name: WinAppSDkPackageArtifactName
    type: string
    default: "WindowsAppSDKNugetPackage"
  - name: TestSelection
    type: string
    default: "*"

steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: ${{ parameters.WinAppSDkPackageArtifactName }}
      downloadPath: '$(Build.SourcesDirectory)\temp'
      itemPattern: |
        **/Microsoft.WindowsAppSDK.*.nupkg

  - task: PowerShell@2
    displayName: Extract WindowsAppSDKVersion
    inputs:
      targetType: 'inline'
      script: |
        Copy-Item -Path "$(Build.SourcesDirectory)\temp" -Destination "$(Build.SourcesDirectory)\PackLocation" -Recurse

        $files = Get-ChildItem $(Build.SourcesDirectory)\temp
        foreach ($file in $files) # Iterate through each package we restored in the directory
        {
          Write-Host "file:" $file.FullName
          $nupkgPaths = Get-ChildItem $file.FullName -Filter "*.nupkg"

          # Extract nupkg to access the nuspec
          # The files in this directory does not contain the nuspec by default
          foreach ($nupkgPath in $nupkgPaths)
          {
            Write-Host "nupkgPath:" $nupkgPath.FullName
            $rename = $nupkgPath.Name + ".zip"
            Rename-Item $nupkgPath.FullName $rename
            $renamedFilePath = $nupkgPath.FullName + ".zip"
            $dest = $file.FullName + "/contents"
            Expand-Archive $renamedFilePath -Destination $dest
          }
          
          $nuspecPaths = Get-ChildItem $file.FullName -Recurse -Filter "*.nuspec"
          foreach ($nuspecPath in $nuspecPaths)
          {
            Write-Host "Found Nuspecs"
            [xml]$nuspec = Get-Content -Path $nuspecPath.FullName
            if ($nuspec.package.metadata.id -eq 'Microsoft.WindowsAppSDK')
            {
              $version = $nuspec.package.metadata.version
              Write-Host "Found " $version
              Write-Host "##vso[task.setvariable variable=WindowsAppSDKPackageVersion;]$version"
              Exit 0
            }
          }
        }
        Exit 1

  - task: PowerShell@2
    name: TestAll
    displayName: TestAll
    inputs:
      filePath: 'TestAll.ps1'
      arguments: > 
        -WindowsAppSDKPackageVersion "$(WindowsAppSDKPackageVersion)"
        -Checkpoint "none" -Platform "x64" 
        -Configuration "release" 
        -YamlStep "all"
        -RunTestMachineSetup
        -Name "${{ parameters.TestSelection }}"
        -PipelineBuild

  - task: PublishBuildArtifacts@1
    displayName: 'Publish test results'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\PipelineTestOutput
      artifactName: TestResults-WindowsAppSDKIntegration
