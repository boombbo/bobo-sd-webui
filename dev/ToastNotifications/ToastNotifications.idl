// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

namespace Microsoft.Windows.ToastNotifications
{
    [experimental]
    // The Shell asset details for Unpackaged App Registrations
    runtimeclass ToastAssets
    {
        // Initialize using Shell assets like DisplayName and iconPath
        ToastAssets(String displayName, Windows.Foundation.Uri iconPath);

        // The App friendly DisplayName for the toast in Action Centre
        String DisplayName { get; };

        // The full file path for the icon image
        Windows.Foundation.Uri IconPath { get; };
    };

    [experimental]
    // The Registration Info for Packaged and Unpackaged Toast Activations
    runtimeclass ToastActivationInfo
    {
        // Initialize using a manifest defined COM Activator Id. Only applicable to Packaged Win32 applications
        static ToastActivationInfo CreateFromActivationGuid(Guid taskClsid);

        // Initialize using Toast Assets. Only applicable to Unpackaged Win32 applications which need to specify their own assets like DisplayName and Icon.
        static ToastActivationInfo CreateFromToastAssets(ToastAssets assets);

        // The CLSID associated with the Client COM server that Windows App SDK will activate
        Guid TaskClsid{ get; };

        // The Shell assets associated with the Unpackaged app
        ToastAssets Assets{ get; };
    };

    [experimental]
    // Event args for the Toast Activation
    runtimeclass ToastActivatedEventArgs
    {
        // Arguments from the invoked button. Empty for Default Activation with no launch args specified in payload.
        String ActivationArgs{ get; };

        // The data from the input elements of a toast like a TextBox
        Windows.Foundation.Collections.IMap<String, String> UserInput{ get; };
    };

    [experimental]
    // Toast Progress Data
    runtimeclass ToastProgressData
    {
        // Initializes a new Instance of ToastProgressData
        ToastProgressData();

        // Gets or sets the sequence number of this notification data.
        // When multiple ToastProgressData objects are received, the system displays the data with the greatest non-zero number.
        UInt32 SequenceNumber;

        // Gets/Sets the value for the title. Binds to {progressTitle} in progress xml tag.
        String Title;

        // Gets/Sets the Value for the numerical Progress percentile: a number between 0 and 1. Binds to {progressValue} in progress xml tag.
        Double Value;

        // Gets/Sets the Value for the Progress String. Binds to {progressValueString} in progress xml tag
        String ValueStringOverride;

        // Gets/Sets the Value for the Status. Binds to {progressStatus} in progress xml tag
        String Status;
    };

    [experimental]
    // The Toast User Setting or Toast Group Policy Setting
    enum ToastNotificationSetting
    {
        Enabled, // Toast is not blocked by settings or group policy
        DisabledForApplication, // Toast is blocked by a user defined App Setting
        DisabledForUser, // Toast is blocked by a user defined Global Setting
        DisabledByGroupPolicy, // Toast is blocked by Group Policy
        DisabledByManifest, // Toast is blocked by a setting in the manifest. Only for packaged applications.
    };

    [experimental]
    // Some basic predefined Toast Payload Templates
    enum ToastTemplateType
    {
        BasicToast,
        ToastWithTwoButtons,
        ToastWithThreeButtons,
        ToastWithProgressBar,
        ToastWithAvatarAndProgressBar,
        ToastWithAvatar,
        ToastWithAvatarAndTextBox,
        ToastWithAvatarAndDropdown,
        ToastWithDropdown,
        ToastWithReminder,
        ToastWithAlarm,
        ToastWithHeroImage,
        ToastWithInlineImage,
    };

    [experimental]
    // The Result for a Toast Progress related operation
    enum ToastProgressResult
    {
        Succeeded, // The progress operation succeeded
        Failed, // The progress operation failed
        NotificationNotFound, // The progress operation failed to find a toast to process updates
    };

    [experimental]
    enum ToastPriority
    {
        Default, // The notification should have default behavior in terms of delivery and display priority during connected standby mode.
        High, // The notification should be treated as high priority. For desktop PCs, this means during connected standby mode the incoming notification can turn on the screen for Surface-like devices if it doesn't have a closed lid detected.
    };

    [experimental]
    // Represent a toast Notification construct
    runtimeclass ToastNotification
    {
        // Initialize a new Toast using an XML Payload.
        ToastNotification(Windows.Data.Xml.Dom.XmlDocument payload);

        // Unique identifier used to replace a notification within a group.
        String Tag;

        // Unique identifier for a toast group in the app
        String Group;

        // A unique identifier for the Toast generated by the platform.
        UInt32 ToastId;

        // The notification Xml Payload
        Windows.Data.Xml.Dom.XmlDocument Payload{ get; };

        // Gets or sets additional information about the toast progress.
        ToastProgressData ProgressData;

        // Gets or sets the time after which a toast notification should not be displayed.
        Windows.Foundation.DateTime ExpirationTime;

        // Indicates whether the toast will remain in the Action Center after a reboot.
        Boolean ExpiresOnReboot;

        // Gets or sets the priority for a Toast.
        // Hints on how and at what urgency level a notification should be presented to the user (whether to wake up the screen, etc).
        ToastPriority Priority;

        // Gets or sets whether a toast's pop-up UI is displayed on the user's screen.
        Boolean SuppressDisplay;
    };

    [experimental]
    // Supports Toast related operations for all prior displayed Toasts in Action Centre
    runtimeclass ToastNotificationHistory
    {
        // Removes a specific toast with a specific toastIdentifier from Action Centre
        Windows.Foundation.IAsyncAction RemoveWithIdentiferAsync(UInt32 toastIdentifier);

        // Removes a toast having a specific tag
        Windows.Foundation.IAsyncAction RemoveWithTagAsync(String tag);

        // Removes a toast having a specific tag and group
        Windows.Foundation.IAsyncAction RemoveWithTagGroupAsync(String tag, String group);

        // Remove all toasts for a specific group
        Windows.Foundation.IAsyncAction RemoveGroupAsync(String group);

        // Removes all the toasts for the App from Action Centre
        Windows.Foundation.IAsyncAction RemoveAllAsync();

        // Gets all the toasts for the App from Action Centre
        Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<ToastNotification> > GetAllAsync();
    };

    [experimental]
    // The manager class which encompasses all Toast API Functionality
    runtimeclass ToastNotificationManager
    {
        // Gets a Default instance of a ToastNotificationManager
        static ToastNotificationManager Default{ get; };

        // Register an activator using an ActivationInfo context and caches the token for unregister
        void RegisterActivator(ToastActivationInfo details);

        // Unregisters the activator and removes the cached Registration token.
        void UnregisterActivator();

        // Event handler for Toast Activations
        event Windows.Foundation.EventHandler<ToastActivatedEventArgs> ToastActivated;

        // Displays the Toast in Action Centre
        void ShowToast(ToastNotification toast);

        // Updates the Toast for a Progress related operation using Tag and Group
        Windows.Foundation.IAsyncOperation<ToastProgressResult> UpdateToastProgressDataAsync(ToastProgressData data, String tag, String group);

        // Updates the Toast for a Progress related operation using Tag
        Windows.Foundation.IAsyncOperation<ToastProgressResult> UpdateToastProgressDataAsync(ToastProgressData data, String tag);

        // Get the Toast Setting status for the app
        ToastNotificationSetting Setting{ get; };

        // Gets an instance of ToastHistory
        ToastNotificationHistory History{ get; };

        // Gets an Xml Payload based ona predefined Toast Template
        Windows.Data.Xml.Dom.XmlDocument GetXmlTemplateContent(ToastTemplateType type);
    };
}
