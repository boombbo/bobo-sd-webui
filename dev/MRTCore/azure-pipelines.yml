# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

#name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)

#trigger:
#- master

parameters:
  doCodeSign: "false"

jobs:
- job: BuildMRT
  pool:
    vmImage: 'windows-latest'

  strategy:
    maxParallel: 10
    matrix:
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      Release_Arm:
        buildPlatform: 'ARM'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'ARM64'
        buildConfiguration: 'Release'
        
  variables:
    solution: '**/*.sln'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
    MRTSourcesDirectory: $(Build.SourcesDirectory)\dev\MRTCore
    MRTBinariesDirectory: $(Build.SourcesDirectory)\BuildOutput

  steps:
#  - task: PkgESSetupBuild@10
#    displayName: 'Package ES - Setup Build'
#    inputs:
#      ProductName: MRT Core
#      useDfs: false
#      branchVersion: false
#      extSync: false
  
#  - task: powershell@2
#    displayName: 'Installing .NET SDK'
#    inputs:
#      targetType: filePath
#      workingDirectory: $(Build.SourcesDirectory)\build
#      filePath: $(Build.SourcesDirectory)\build\DownloadDotNetCoreSdk.ps1
  
#  - task: BatchScript@1
#    displayName: 'Use .NET SDK'
#    inputs:
#      filename: '$(Build.SourcesDirectory)\build\SetDotnetVars.cmd'
#      arguments: '$(Build.SourcesDirectory)'
#      modifyEnvironment: true

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
      workingDirectory: '$(Build.SourcesDirectory)'

#  - task: BatchScript@1
#    displayName: 'Debug'
#    inputs:
#      filename: '$(Build.SourcesDirectory)\build\debug-pipeline.cmd'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.6'
    inputs:
      versionSpec: 5.6
    continueOnError: true

  # NuGetCommand@2
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore of MrtCore'
    inputs:
      command: 'restore'
      restoreSolution: '$(MRTSourcesDirectory)\mrt\MrtCore.sln'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)\nuget.config'
  
  - task: VSBuild@1
    displayName: 'build MrtCore'
    inputs:
      platform: '$(buildPlatform)'
      solution: '$(MRTSourcesDirectory)\mrt\MrtCore.sln'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /binaryLogger:$(Build.SourcesDirectory)/mrtcore.$(buildPlatform).$(buildConfiguration).binlog'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish mrtcore binlog'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)/mrtcore.$(buildPlatform).$(buildConfiguration).binlog
      artifactName: binlogs

  - task: VSTest@2
    displayName: 'test MRT'
    condition: and(succeeded(), or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64')))
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\*test*.dll
        !**\*TestAdapter.dll
        !**\TE.*.dll
        !**\obj\**
      searchFolder: '$(MRTBinariesDirectory)\Release\$(buildPlatform)'
      testRunTitle: 'test MRT $(buildPlatform)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'Medium'
      failOnAlert: true

  - task: CopyFiles@2
    displayName: 'copy binaries for signing'
    inputs:
      SourceFolder: '$(MRTBinariesDirectory)\Release\$(buildPlatform)'
      Contents: |
        mrm\mrm.dll
        mrm\mrm.lib
        mrm\mrm.pdb
        Microsoft.ApplicationModel.Resources\Microsoft.ApplicationModel.Resources.dll
        Microsoft.ApplicationModel.Resources\Microsoft.ApplicationModel.Resources.pdb
      TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\$(buildPlatform)'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy projection binaries and symbols for signing'
    condition: and(succeeded(), eq(variables['buildPlatform'], 'x86'))
    inputs:
      SourceFolder: '$(MRTBinariesDirectory)\Release\AnyCPU\Microsoft.ApplicationModel.Resources.Projection'
      Contents: |
        net5.0\Microsoft.ApplicationModel.Resources.Projection.dll
        net5.0\Microsoft.ApplicationModel.Resources.Projection.pdb
        netstandard2.0\Microsoft.ApplicationModel.Resources.Projection.dll
        netstandard2.0\Microsoft.ApplicationModel.Resources.Projection.pdb
      TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\anycpu'
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'copy winmd for signing'
    condition: and(succeeded(), eq(variables['buildPlatform'], 'x86'))
    inputs:
      SourceFolder: '$(MRTBinariesDirectory)\Release\$(buildPlatform)\Microsoft.ApplicationModel.Resources'
      Contents: |
        Microsoft.ApplicationModel.Resources.winmd
      TargetFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\lib\anycpu'
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Binaries'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\mrt_raw'
      ArtifactName: 'binaries_raw'

- job: SignMRT
  condition: and(succeeded(), eq(${{ parameters.doCodeSign }}, 'true'))
  dependsOn:
    - BuildMRT

  ${{if eq(parameters.doCodeSign, 'false')}}:
    pool:
      vmImage: 'windows-latest'

  ${{if eq(parameters.doCodeSign, 'true')}}:
    pool:
      name: Package ES Lab E
  
  variables:
    solution: '**/*.sln'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
    MRTSourcesDirectory: $(Build.SourcesDirectory)\dev\MRTCore

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download: Raw Binaries'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'binaries_raw'
      downloadPath: '$(Build.ArtifactStagingDirectory)\mrt_raw'

  - ${{if eq(parameters.doCodeSign, 'true')}}:
    - task: PkgESCodeSign@10
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        signConfigXml: '$(MRTSourcesDirectory)\SignConfig.xml'
        inPathRoot: '$(BUILD.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Signed Binaries'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw'
      ArtifactName: 'binaries_raw'

- job: PublishMRT
  dependsOn:
    - BuildMRT
    - SignMRT
  condition: and(in(dependencies.BuildMRT.result, 'Succeeded'), in(dependencies.SignMRT.result, 'Succeeded', 'Skipped'))

  ${{if eq(parameters.doCodeSign, 'false')}}:
    pool:
      vmImage: 'windows-latest'

  ${{if eq(parameters.doCodeSign, 'true')}}:
    pool:
      name: Package ES Lab E
  
  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
    Major: '1'
    Minor: '0'
    Patch: '0'
    MRTSourcesDirectory: $(Build.SourcesDirectory)\dev\MRTCore

  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.6'
    inputs:
      versionSpec: 5.6
    continueOnError: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Binaries'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'binaries_raw'
      downloadPath: '$(Build.ArtifactStagingDirectory)\mrt_raw'

# START of copying files into their final package location.

  - task: CopyFiles@2
    displayName: 'copy winmd'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\anycpu'
      Contents: |
        Microsoft.ApplicationModel.Resources.winmd
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\uap10.0\'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy .net 5 projection DLL and PDB'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\anycpu'
      Contents: |
        net5.0\Microsoft.ApplicationModel.Resources.Projection.pdb
        net5.0\Microsoft.ApplicationModel.Resources.Projection.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\net5.0-windows\'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy .net 2 projection DLL and PDB'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\anycpu'
      Contents: |
        netstandard2.0\Microsoft.ApplicationModel.Resources.Projection.pdb
        netstandard2.0\Microsoft.ApplicationModel.Resources.Projection.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\netstandard2.0\'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy x86'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\x86'
      Contents: |
        mrm.pdb
        Microsoft.ApplicationModel.Resources.pdb
        mrm.dll
        Microsoft.ApplicationModel.Resources.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\runtimes\win10-x86\native'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy x64'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\x64'
      Contents: |
        mrm.pdb
        Microsoft.ApplicationModel.Resources.pdb
        mrm.dll
        Microsoft.ApplicationModel.Resources.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\runtimes\win10-x64\native'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy ARM'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\ARM'
      Contents: |
        mrm.pdb
        Microsoft.ApplicationModel.Resources.pdb
        mrm.dll
        Microsoft.ApplicationModel.Resources.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\runtimes\win10-arm\native'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy ARM64'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\ARM64'
      Contents: |
        mrm.pdb
        Microsoft.ApplicationModel.Resources.pdb
        mrm.dll
        Microsoft.ApplicationModel.Resources.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\runtimes\win10-arm64\native'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy import lib x86'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\x86'
      Contents: |
        mrm.lib
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\win10-x86'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy import lib x64'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\x64'
      Contents: |
        mrm.lib
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\win10-x64'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy import lib ARM'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\ARM'
      Contents: |
        mrm.lib
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\win10-arm'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy import lib ARM64'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)\mrt_raw\binaries_raw\lib\ARM64'
      Contents: |
        mrm.lib
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\lib\win10-arm64'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'copy packaging files'
    inputs:
      SourceFolder: '$(MRTSourcesDirectory)\packaging'
      Contents: |
        Microsoft.ApplicationModel.Resources.PriGen.targets
        Microsoft.ApplicationModel.Resources.References.targets
        Microsoft.ApplicationModel.Resources.targets
        native\Microsoft.ApplicationModel.Resources.C.props
        native\Microsoft.ApplicationModel.Resources.props
        native\Microsoft.ApplicationModel.Resources.targets
        native\Microsoft.ApplicationModel.Resources.WinRt.props
        README.md
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\build'
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'copy header'
    inputs:
      SourceFolder: '$(MRTSourcesDirectory)\mrt\core\src'
      Contents: |
        mrm.h
      TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\include'
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\drop'
      ArtifactName: 'drop'

  # NuGetCommand@2
#  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
#    condition: and(succeeded(), eq(variables.codeSign, true))
#    displayName: 'publish to MRTCore feed'
#    inputs:
#      command: 'push'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/nuget/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#      nuGetFeedType: 'internal'
#      publishVstsFeed: '2771a91e-5705-4d88-a3e9-70623b166f8d/659bea81-0d99-4dc0-b32f-200cd635e5ad'

# TODO: get the test app to build using the NuGet package generated earlier in the pipeline.
#- task: NuGetCommand@2
#  displayName: 'NuGet restore of test apps'
#  env:
#    # The RuntimeIdentifier property in a .csproj is constructed using win-$(Platform). AnyCPU is the default platform, but
#    # "win-AnyCPU" is an invalid RuntimeIdentifier. Just use the platform x64 instead! It doesn't matter whether x86 or x64 is used.
#    NUGET_RESTORE_MSBUILD_ARGS: /p:Platform=x64
#  inputs:
#    command: 'restore'
#    restoreSolution: |
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app.sln'
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app_cpp.sln'
#    feedsToUse: 'select'
#    includeNuGetOrg: false
#    vstsFeed: '$(Build.ArtifactStagingDirectory)\nuget'

# TODO: use the $(solution) variable instead. That'll build all solution files in the repo. Currently, this isn't being done because getting
# $(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app.sln to build in the pipeline is being deferred.

#- task: VSBuild@1
#  displayName: 'build x86'
#  inputs:
#    platform: 'x86'
#    solution: |
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app.sln'
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app_cpp.sln'
#    configuration: '$(buildConfiguration)'
#    msbuildArgs: '/p:AppxBundlePlatforms="x86" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'

#- task: VSBuild@1
#  displayName: 'build x64'
#  inputs:
#    platform: 'x64'
#    solution: |
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app.sln'
#      '$(Build.SourcesDirectory)\tools\TestApps\winui_desktop_packaged_app\winui_desktop_packaged_app_cpp.sln'
#    configuration: '$(buildConfiguration)'
#    msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'

#  - task: PkgESSerializeForPostBuild@10
#    displayName: 'PkgES Post Build Serialization'
#    continueOnError: true

#  - task: PkgESLateTasks@10
#    displayName: 'PkgES Finalize and Cleanup'
#    inputs:
#      enablePostBuild: false
#      dfsReleaseInPb: true
