// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

#include <TerminalVelocityFeatures-PushNotifications.h>

namespace Microsoft.Windows.PushNotifications
{
    [feature(Feature_PushNotifications)]
    // Event args for the Push payload.
    runtimeclass PushNotificationReceivedEventArgs
    {
        // The Push payload
        byte[] Payload { get; };

        // Gets a deferral to allow push notification processing even if the system goes into low power mode.
        Windows.ApplicationModel.Background.BackgroundTaskDeferral GetDeferral();

        // Subscribe to Cancelled event handler to be signalled when resource policies are no longer true like 30s wallclock timer
        event Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler Canceled;

        // Indicates if the foreground push notification will be re-posted through background activation.
        // Default value is false, which allows re-posting.
        Boolean Handled;
    };

    [feature(Feature_PushNotifications)]
    [flags]
    enum PushNotificationRegistrationActivators
    {
        Undefined = 0,
        PushTrigger = 0x1, // Registers a Push Trigger with Background Infrastructure
        ComActivator = 0x2, // Registers the Background Task component as an in-process COM server
        ProtocolActivator = 0x4, // Registers an application with the PushNotificationsLongRunningTask to be activated via protocol
    };

    [feature(Feature_PushNotifications)]
    runtimeclass PushNotificationActivationInfo
    {
        // Initialize using a Registration option and optionally defined parameters like manifest defined activatorId
        // 1) If kind = PushTrigger is specified, only the Push Trigger will be Registered with Background Infra
        // 2) If kind = ComActivator is specified, the Background Task component will be Registered as an in-process COM server
        PushNotificationActivationInfo(PushNotificationRegistrationActivators activators, Guid taskClsid);

        // Applications that need to use ProtocolActivator will use this constructor
        PushNotificationActivationInfo(PushNotificationRegistrationActivators activators);

        // The CLSID associated with the Client COM server that Windows App SDK will activate
        Guid TaskClsid{ get; };

        PushNotificationRegistrationActivators Activators{ get; };

        // The conditions under which Push Triggers would execute
        Windows.ApplicationModel.Background.IBackgroundCondition[] GetConditions();
        void SetConditions(Windows.ApplicationModel.Background.IBackgroundCondition[] conditions);
    };

    [feature(Feature_PushNotifications)]
    enum PushNotificationChannelStatus
    {
        InProgress, // The request is in progress and there is no retry operation
        InProgressRetry, // The request is in progress and is in a backoff retry state. Check ExtendedError for HRESULT for retryable error.
        CompletedSuccess, // The request completed successfully
        CompletedFailure, // The request failed with some critical internal error. Check ExtendedError for HRESULT
    };

    // The PushNotificationChannel Progress result
    [feature(Feature_PushNotifications)]
    struct PushNotificationCreateChannelStatus
    {
        // Either InProgress or InProgressRetry status
        PushNotificationChannelStatus status;

        // The last extended error we failed Channel requests on that caused the inprogress retry status. E_PENDING if this is just progress status.
        HRESULT extendedError;

        // Total Retries so far
        UInt32 retryCount;
    };

    [feature(Feature_PushNotifications)]
    runtimeclass PushNotificationChannel
    {
        PushNotificationChannel(Windows.Networking.PushNotifications.PushNotificationChannel channel);

        // The Channel Uri for app to Post a notification to.
        Windows.Foundation.Uri Uri { get; };

        // Expiration of the Channel
        Windows.Foundation.DateTime ExpirationTime { get; };

        // Unsubscribes the channel
        void Close();

        // Event handler for Push Notifications
        event Windows.Foundation.TypedEventHandler<PushNotificationChannel, PushNotificationReceivedEventArgs> PushReceived;
    }

    [feature(Feature_PushNotifications)]
    runtimeclass PushNotificationCreateChannelResult
    {
        PushNotificationCreateChannelResult(
            PushNotificationChannel channel,
            HRESULT extendedError,
            PushNotificationChannelStatus status);

        // The Push channel associated with the Result. Valid only if status is CompletedSuccess.
        PushNotificationChannel Channel { get; };

        // More detailed error code in addition to the ChannelStatus state.
        HRESULT ExtendedError{ get; };

        // The Status of the CreateChannel operation
        PushNotificationChannelStatus Status { get; };
    };

    [feature(Feature_PushNotifications)]
    static runtimeclass PushNotificationManager
    {
        // Register an activator using an ActivationInfo context and cache the flag for unregister
        static void RegisterActivator(PushNotificationActivationInfo details);

        // Unregister any activator given PushNotificationRegistrationActivators
        // 1) If kind = PushTrigger is specified, the trigger itself will be removed
        // 2) If kind = ComActivator is specified, the Project Reunion Background Task component will no longer act as an InProc COM Server
        // 3) If kind = ProtocolActivator is specified, the application will be unregistered from the long running process that handles activation
        static void UnregisterActivator(PushNotificationRegistrationActivators activators);

        // Unregister all activators registered for the application
        static void UnregisterAllActivators();

        // Request a Push Channel with an encoded RemoteId from WNS. RemoteId is an AAD identifier GUID
        static Windows.Foundation.IAsyncOperationWithProgress<PushNotificationCreateChannelResult, PushNotificationCreateChannelStatus> CreateChannelAsync(Guid remoteId);

        // Applications will call this to check which flags are supported for RegisterActivator
        static Boolean IsActivatorSupported(PushNotificationRegistrationActivators activators);
    };
}
