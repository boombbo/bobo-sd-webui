parameters:
# Extract the build revision number from Build.BuildNumber. This is needed to pass to build-nupkg
  jobName: ''
  dependsOn: ''
  buildOutputDir: '$(Build.SourcesDirectory)\BuildOutput'
  nupkgdir: '$(build.artifactStagingDirectory)\nuget'
# The "primary" build arch is the one that the nuspec gets its winmd, pri, and other neutral files from
  primaryBuildArch: x86
  buildFlavor: Release
  signConfig: ''
  useReleaseTag: 'false'
  prereleaseVersionTag: 'prerelease'
  condition: ''
  major: '1'
  minor: '0'
  patch: '0'

jobs:
- job: ${{ parameters.jobName }}
  dependsOn:
    - ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}

  # XES tasks need to be on PackageES machines.
  ${{if parameters.signConfig }}:
    pool:
      name: Package ES Lab E
  
  # otherwise run on Windows VM
  ${{if eq(parameters.signConfig, '')}}:
    pool:
      vmImage: 'windows-2019'

  steps:
  - ${{if parameters.signConfig }}:
    - task: PkgESSetupBuild@10
      displayName: 'XESSetupBuild'
      inputs:
        productName: microsoft.projectreunion
        branchVersion: false
        nugetVer: true

  - template: ProjectReunion-PopulateBuildDateAndRevision-Steps.yml

  - script: |
      echo parameters.jobName '${{ parameters.jobName }}'
      echo parameters.buildOutputDir '${{ parameters.buildOutputDir }}'
      echo parameters.nupkgdir '${{ parameters.nupkgdir }}'
      echo parameters.publishPath '${{ parameters.publishPath }}'
      echo buildrevision=$(buildrevision)
      echo builddate=$(builddate)
      echo useReleaseTag=${{ parameters.useReleaseTag }}
    displayName: 'CreateNugetPackage: Display parameters'

  - task: DownloadBuildArtifacts@0 
    inputs: 
      artifactName: drop
      downloadPath: '$(Build.SourcesDirectory)\Artifacts'

  # debugging - remove or comment out before completing PR      
  - script: |
      dir /s $(Build.SourcesDirectory)

  - template: ProjectReunion-InstallNuget-Steps.yml

  # UNDONE to move MRTCore into Project Reunion nuget package
  # - ${{if parameters.signConfig }}:
  #   # Re-create framework packages because we made them in the build step against unsigned binaries.
  #   - template: ProjectReunion-MakeFrameworkPackages-Steps.yml

  #   # Copy the re-made framework packages into the same location in the artifact drop to be republished at the end of the job.
  #   - task: CopyFiles@2
  #     inputs:
  #       targetFolder: '${{ parameters.nupkgdir }}'
  #       sourceFolder: '$(Build.SourcesDirectory)\Artifacts\drop'
  #       Contents: '**\Microsoft.ProjectReunion*.appx'

  # - powershell: |
  #     $prereleaseTag = "${{ parameters.prereleaseVersionTag }}"
  #     if ("${{ parameters.useReleaseTag}}" -eq [bool]::TrueString) { $prereleaseTag = "" }

  #     & "$(Build.SourcesDirectory)\build\NuSpecs\build-nupkg.ps1" `
  #       -BuildOutput '$(Build.SourcesDirectory)\Artifacts\drop' `
  #       -OutputDir '${{ parameters.nupkgdir }}' `
  #       -prereleaseversion "$prereleaseTag" `
  #       -DateOverride '$(builddate)' `
  #       -Subversion '$(buildrevision)' `
  #       -BuildArch ${{ parameters.primaryBuildArch }} `
  #       -BuildFlavor ${{ parameters.buildFlavor }}

  #   displayName: 'build-nupkg.ps1'
  
  - task: CopyFiles@2
    displayName: 'copy license'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        LICENSE
      TargetFolder: '$(Build.SourcesDirectory)\Artifacts\drop'
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    inputs:
      command: 'pack'
      packagesToPack: '$(Build.SourcesDirectory)\build\NuSpecs\Microsoft.ProjectReunion.nuspec'
      versioningScheme: 'byPrereleaseNumber'
      majorVersion: ${{ parameters.major }}
      minorVersion: ${{ parameters.minor }}
      patchVersion: ${{ parameters.patch }}
      basePath: '$(Build.SourcesDirectory)\Artifacts\drop'
      packDestination: ${{ parameters.nupkgdir }}
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: ${{ parameters.nupkgdir }}
      ArtifactName: 'nuget' 

  - ${{if parameters.signConfig }}:
    - task: PkgESCodeSign@10
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)
      displayName: CodeSign
      inputs:
        signConfigXml: ${{ parameters.signConfig }}
        inPathRoot: '${{ parameters.nupkgdir }}'
        outPathRoot: '${{ parameters.nupkgdir }}'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: nupkg'
    inputs:
      PathtoPublish: '${{ parameters.nupkgdir }}'
      artifactName: 'nuget'
      
  - ${{if parameters.signConfig }}:
    # this mysterious guid fixes the "NuGetCommand@2 is ambiguous" error :-(
    - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
      displayName: 'NuGet push to Project.Reunion.nuget.internal'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/nuget/*.nupkg;!$(Build.ArtifactStagingDirectory)/nuget/*.symbols.nupkg'
        verbosityPush: 'Detailed' 
        nuGetFeedType: 'internal'
        #Note: The project qualifier is always required when using a feed name. Also, do not use organization scoped feeds. 
        publishVstsFeed: 'ProjectReunion/Project.Reunion.nuget.internal'

#UNDONE - EHO we need to seed these guid's properly!
#see, e.g. AzurePipelinesTemplates\ProjectReunion-BuildAndPublishPGONuGet-Job.yml
#
# To publish the package to vsts feed, set queue time variable NuGetFeed = d62f8eac-f05c-4c25-bccb-21f98b95c95f
# This is the magic GUID from the pipeline visual designer for this feed: https://dev.azure.com/ms/microsoft-ui-xaml/_packaging?_a=feed&feed=MUX-CI
#  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
#    condition: and(ne(variables['NuGetFeed'], ''), ne(variables['Build.Reason'], 'Manual'))
#    displayName: 'NuGet push to $(NuGetFeed)'
#    inputs:
#      command: push
#      publishVstsFeed: $(NuGetFeed)
#      packagesToPush: $(Build.ArtifactStagingDirectory)/*.nupkg

