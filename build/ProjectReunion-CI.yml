# see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases for info on yaml ADO jobs
name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
  minimumExpectedTestsExecutedCount: 500  # Sanity check for minimum expected tests to be reported
  rerunPassesRequiredToAvoidFailure: 5

jobs:
- job: Build
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      Debug_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Debug'
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        PGOBuildMode: 'Optimize'
      Release_Arm:
        buildPlatform: 'arm'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'arm64'
        buildConfiguration: 'Release'

  variables:
    appxPackageDir : $(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages
    buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
    publishDir : $(Build.ArtifactStagingDirectory)
  steps:
  - task: NuGetAuthenticate@0
    inputs:
      nuGetServiceConnections: 'WindowsES'
  - template: AzurePipelinesTemplates\ProjectReunion-BuildDevProject-Steps.yml
  - template: AzurePipelinesTemplates\ProjectReunion-PublishProjectOutput-Steps.yml

# MRTCore build pipeline
- template: ..\dev\MRTCore\azure-pipelines.yml
  parameters:
    buildJobName: 'BuildMRTCore'
    
- template: AzurePipelinesTemplates\ProjectReunion-RunHelixTests-Job.yml
  parameters:
    name: 'RunTestsInHelix'
    dependsOn: 
      - Build
    condition: in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
    testSuite: 'DevTestSuite'
    rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)

- template: AzurePipelinesTemplates\ProjectReunion-ProcessTestResults-Job.yml
  parameters:
    dependsOn: RunTestsInHelix
    rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)
    minimumExpectedTestsExecutedCount: 2

# Create Nuget Package
- template: AzurePipelinesTemplates\ProjectReunion-CreateNugetPackage-Job.yml
  parameters:
    jobName: CreateNugetPackage
    dependsOn:
      - Build
      - PublishMRT
    prereleaseVersionTag: ci
    condition: |
      and
      (
        in(dependencies.PublishMRT.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
        in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
      )

# Build solution that depends on nuget package
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildNugetPkgTests'
#    buildArtifactName: 'NugetPkgTestsDrop'
#    runTestJobName: 'RunNugetPkgTestsInHelix'
#    helixType: 'test/nuget'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\drop'

#UNDONE - depends on Helix infrastructure, subsequent PR
# Framework package tests
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildFrameworkPkgTests'
#    buildArtifactName: 'FrameworkPkgTestsDrop'
#    runTestJobName: 'RunFrameworkPkgTestsInHelix'
#    helixType: 'test/frpkg'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\drop\FrameworkPackage'

#UNDONE - subsequent PR
#- template: AzurePipelinesTemplates\ProjectReunion-ProcessTestResults-Job.yml
#  parameters:
#    dependsOn:
#    - RunTestsInHelix
#    - RunNugetPkgTestsInHelix
#    - RunFrameworkPkgTestsInHelix
#    rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)
#    minimumExpectedTestsExecutedCount: $(minimumExpectedTestsExecutedCount)
